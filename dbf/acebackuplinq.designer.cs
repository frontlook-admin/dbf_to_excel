#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace dbf
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="aceBackup")]
	public partial class acebackuplinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertComp(Comp instance);
    partial void UpdateComp(Comp instance);
    partial void DeleteComp(Comp instance);
    partial void InsertPathData(PathData instance);
    partial void UpdatePathData(PathData instance);
    partial void DeletePathData(PathData instance);
    #endregion
		
		public acebackuplinqDataContext() : 
				base(global::dbf.Properties.Settings.Default.aceBackup, mappingSource)
		{
			OnCreated();
		}
		
		public acebackuplinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public acebackuplinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public acebackuplinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public acebackuplinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Comp> Comps
		{
			get
			{
				return this.GetTable<Comp>();
			}
		}
		
		public System.Data.Linq.Table<PathData> PathDatas
		{
			get
			{
				return this.GetTable<PathData>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comp")]
	public partial class Comp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompId;
		
		private string _Name;
		
		private string _CompPath;
		
		private int _BackInterval;
		
		private string _IntervalType;
		
		private string _BackUpLocation;
		
		private System.DateTime _LastBackup;
		
		private bool _Active;
		
		private EntitySet<PathData> _PathDatas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompIdChanging(int value);
    partial void OnCompIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompPathChanging(string value);
    partial void OnCompPathChanged();
    partial void OnBackIntervalChanging(int value);
    partial void OnBackIntervalChanged();
    partial void OnIntervalTypeChanging(string value);
    partial void OnIntervalTypeChanged();
    partial void OnBackUpLocationChanging(string value);
    partial void OnBackUpLocationChanged();
    partial void OnLastBackupChanging(System.DateTime value);
    partial void OnLastBackupChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Comp()
		{
			this._PathDatas = new EntitySet<PathData>(new Action<PathData>(this.attach_PathDatas), new Action<PathData>(this.detach_PathDatas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompId
		{
			get
			{
				return this._CompId;
			}
			set
			{
				if ((this._CompId != value))
				{
					this.OnCompIdChanging(value);
					this.SendPropertyChanging();
					this._CompId = value;
					this.SendPropertyChanged("CompId");
					this.OnCompIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompPath", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CompPath
		{
			get
			{
				return this._CompPath;
			}
			set
			{
				if ((this._CompPath != value))
				{
					this.OnCompPathChanging(value);
					this.SendPropertyChanging();
					this._CompPath = value;
					this.SendPropertyChanged("CompPath");
					this.OnCompPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackInterval", DbType="Int NOT NULL")]
		public int BackInterval
		{
			get
			{
				return this._BackInterval;
			}
			set
			{
				if ((this._BackInterval != value))
				{
					this.OnBackIntervalChanging(value);
					this.SendPropertyChanging();
					this._BackInterval = value;
					this.SendPropertyChanged("BackInterval");
					this.OnBackIntervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntervalType", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string IntervalType
		{
			get
			{
				return this._IntervalType;
			}
			set
			{
				if ((this._IntervalType != value))
				{
					this.OnIntervalTypeChanging(value);
					this.SendPropertyChanging();
					this._IntervalType = value;
					this.SendPropertyChanged("IntervalType");
					this.OnIntervalTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BackUpLocation", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string BackUpLocation
		{
			get
			{
				return this._BackUpLocation;
			}
			set
			{
				if ((this._BackUpLocation != value))
				{
					this.OnBackUpLocationChanging(value);
					this.SendPropertyChanging();
					this._BackUpLocation = value;
					this.SendPropertyChanged("BackUpLocation");
					this.OnBackUpLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastBackup", DbType="DateTime NOT NULL")]
		public System.DateTime LastBackup
		{
			get
			{
				return this._LastBackup;
			}
			set
			{
				if ((this._LastBackup != value))
				{
					this.OnLastBackupChanging(value);
					this.SendPropertyChanging();
					this._LastBackup = value;
					this.SendPropertyChanged("LastBackup");
					this.OnLastBackupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comp_PathData", Storage="_PathDatas", ThisKey="CompId", OtherKey="CompId")]
		public EntitySet<PathData> PathDatas
		{
			get
			{
				return this._PathDatas;
			}
			set
			{
				this._PathDatas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PathDatas(PathData entity)
		{
			this.SendPropertyChanging();
			entity.Comp = this;
		}
		
		private void detach_PathDatas(PathData entity)
		{
			this.SendPropertyChanging();
			entity.Comp = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PathData")]
	public partial class PathData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PathId;
		
		private int _CompId;
		
		private string _Path;
		
		private EntityRef<Comp> _Comp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPathIdChanging(int value);
    partial void OnPathIdChanged();
    partial void OnCompIdChanging(int value);
    partial void OnCompIdChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    #endregion
		
		public PathData()
		{
			this._Comp = default(EntityRef<Comp>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if ((this._PathId != value))
				{
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompId", DbType="Int NOT NULL")]
		public int CompId
		{
			get
			{
				return this._CompId;
			}
			set
			{
				if ((this._CompId != value))
				{
					if (this._Comp.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompIdChanging(value);
					this.SendPropertyChanging();
					this._CompId = value;
					this.SendPropertyChanged("CompId");
					this.OnCompIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comp_PathData", Storage="_Comp", ThisKey="CompId", OtherKey="CompId", IsForeignKey=true)]
		public Comp Comp
		{
			get
			{
				return this._Comp.Entity;
			}
			set
			{
				Comp previousValue = this._Comp.Entity;
				if (((previousValue != value) 
							|| (this._Comp.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comp.Entity = null;
						previousValue.PathDatas.Remove(this);
					}
					this._Comp.Entity = value;
					if ((value != null))
					{
						value.PathDatas.Add(this);
						this._CompId = value.CompId;
					}
					else
					{
						this._CompId = default(int);
					}
					this.SendPropertyChanged("Comp");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
